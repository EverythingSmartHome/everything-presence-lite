binary_sensor:
  - platform: gpio
    name: "Occupancy"
    id: mmwave
    device_class: occupancy
    pin:
      number: GPIO16
      mode: INPUT_PULLDOWN
      
uart:
  id: uart_bus
  tx_pin: GPIO18
  rx_pin: GPIO17
  baud_rate: 9600
  debug:
    direction: BOTH
    dummy_receiver: true
    after:
      delimiter: "\n"
    sequence:
      - lambda: UARTDebug::log_string(direction, bytes);

light:
  - platform: binary
    name: "mmWave LED"
    restore_mode: RESTORE_DEFAULT_OFF
    output: mmwave_led_output
    entity_category: config
    disabled_by_default: false

output:
  - platform: template
    id: mmwave_led_output
    type: binary
    write_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - if:
          condition:
            lambda: !lambda return state;
          then:
            - uart.write: "setLedMode 1 0"
          else:
            - uart.write: "setLedMode 1 1"
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 3s
      - switch.turn_on: mmwave_sensor

switch:
  - platform: template
    name: "mmWave Sensor"
    id: mmwave_sensor
    disabled_by_default: true
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    turn_on_action:
      - uart.write: "sensorStart"
      - delay: 1s
    turn_off_action:
      - uart.write: "sensorStop"
      - delay: 1s

  - platform: template
    name: "UART Presence Output"
    id: uart_presence_output
    entity_category: config
    disabled_by_default: true
    optimistic: true
    turn_on_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setUartOutput 1 1"
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 3s
      - switch.turn_on: mmwave_sensor
    turn_off_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setUartOutput 1 0"
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 3s
      - switch.turn_on: mmwave_sensor

  - platform: template
    name: "UART Target Output"
    id: uart_target_output
    entity_category: config
    disabled_by_default: true
    optimistic: true
    assumed_state: false
    turn_on_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setUartOutput 2 1 1 1"
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 3s
      - switch.turn_on: mmwave_sensor
    turn_off_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setUartOutput 2 0"
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 3s
      - switch.turn_on: mmwave_sensor

number:
  - platform: template
    id: mmwave_distance_min
    name: "mmWave Minimum Distance"
    icon: mdi:arrow-left-right
    entity_category: config
    min_value: 0.6
    max_value: 25.0
    initial_value: 0.6
    optimistic: true
    step: 0.1
    restore_value: true
    unit_of_measurement: m
    mode: slider

  - platform: template
    id: mmwave_distance_max
    name: "mmWave Max Distance"
    icon: mdi:arrow-left-right
    entity_category: config
    min_value: 0.6
    max_value: 25.0
    initial_value: 12.0
    optimistic: true
    step: 0.1
    restore_value: true
    unit_of_measurement: m
    mode: slider

  - platform: template
    id: mmwave_trigger_range
    name: "Trigger Range (mmWave)"
    icon: mdi:arrow-left-right
    entity_category: config
    min_value: 2.4
    max_value: 25.0
    initial_value: 6.0
    optimistic: true
    step: 0.1
    restore_value: true
    unit_of_measurement: m
    mode: slider
    set_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: !lambda |-
          // Retrieve current values from the two sensors
          float trigger_value = x;
          float detection_max = id(mmwave_distance_max).state;
          // If the trigger exceeds the maximum detection range, clip it
          if (trigger_value > detection_max) {
            ESP_LOGW("mmwave", "Trigger (%.1f m) exceeds detection max (%.1f m). Using max value.", trigger_value, detection_max);
            trigger_value = detection_max;
          }
          char buf[8];
          sprintf(buf, "%.1f", trigger_value);
          std::string cmd = std::string("setTrigRange ") + buf;
          return std::vector<uint8_t>(cmd.begin(), cmd.end());
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 1s
      - switch.turn_on: mmwave_sensor

  - platform: template
    name: "mmWave Off Latency"
    icon: mdi:clock-end
    entity_category: config
    id: mmwave_off_latency
    min_value: 1
    max_value: 1500
    initial_value: 15
    optimistic: true
    step: 1
    restore_value: true
    unit_of_measurement: seconds
    mode: slider
    set_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: !lambda
          char buf[32];
          sprintf(buf, "setLatency %.1f %.1f", id(mmwave_on_latency).state, id(mmwave_off_latency).state);
          return std::vector<uint8_t>(buf, buf + strlen(buf));
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 1s
      - switch.turn_on: mmwave_sensor

  - platform: template
    name: "mmWave On Latency"
    icon: mdi:clock-start
    id: mmwave_on_latency
    entity_category: config
    min_value: 0.5
    max_value: 100
    initial_value: 0.5
    optimistic: true
    step: 0.5
    restore_value: true
    unit_of_measurement: seconds
    mode: slider
    set_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: !lambda
          char buf[32];
          sprintf(buf, "setLatency %.1f %.1f", id(mmwave_on_latency).state, id(mmwave_off_latency).state);
          return std::vector<uint8_t>(buf, buf + strlen(buf));
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 1s
      - switch.turn_on: mmwave_sensor

  - platform: template
    name: "mmWave Sustain Sensitivity"
    icon: mdi:target-variant
    id: mmwave_sensitivity
    entity_category: config
    min_value: 0
    max_value: 9
    initial_value: 7
    optimistic: true
    step: 1
    restore_value: true

  - platform: template
    name: "mmWave Trigger Sensitivity"
    icon: mdi:target-variant
    id: mmwave_trigger_sensitivity
    entity_category: config
    min_value: 0
    max_value: 9
    initial_value: 5
    optimistic: true
    step: 1
    restore_value: true

button:
  - platform: template
    name: "Set Distance"
    id: set_distance
    entity_category: config
    on_press:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: !lambda
          std::string buf;
          {
            char tmp[16];
            sprintf(tmp, "%.1f", id(mmwave_distance_min).state);
            buf += tmp;
          }
          buf = "setRange " + buf + " ";
          {
            char tmp[16];
            sprintf(tmp, "%.1f", id(mmwave_distance_max).state);
            buf += tmp;
          }
          return std::vector<uint8_t>(buf.begin(), buf.end());
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 1s
      - switch.turn_on: mmwave_sensor
 
  - platform: template
    name: "Set Sensitivity"
    id: set_sensitivity
    entity_category: config
    on_press:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: !lambda
          char buf[32];
          sprintf(buf, "setSensitivity %d %d", (int)id(mmwave_sensitivity).state, (int)id(mmwave_trigger_sensitivity).state);
          return std::vector<uint8_t>(buf, buf + strlen(buf));
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 1s
      - switch.turn_on: mmwave_sensor

  - platform: template
    name: "Restart mmWave Sensor"
    id: restart_mmwave
    entity_category: config
    internal: true
    on_press:
      - uart.write: "resetSystem"

  - platform: template
    name: "Factory Reset mmWave"
    icon: mdi:cog-counterclockwise
    id: factory_reset_mmwave
    disabled_by_default: true
    entity_category: config
    on_press:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "resetCfg"
      - delay: 3s
      - switch.turn_on: mmwave_sensor
  
  - platform: template
      name: "Stop Sensor"
      id: stop_sensor
      entity_category: config
      on_press:
        - switch.turn_off: mmwave_sensor
  
  - platform: template
      name: "Start Sensor"
      id: start_sensor
      entity_category: config
      on_press:
        - switch.turn_on: mmwave_sensor

  - platform: template
    name: "Get Sensor Settings"
    id: get_sensor_settings
    entity_category: config
    on_press:
      - switch.turn_off: mmwave_sensor
      - delay: 500ms
      - uart.write: "getSWV"
      - delay: 500ms
      - uart.write: "getHWV"
      - delay: 500ms
      - uart.write: "getRange"
      - delay: 500ms
      - uart.write: "getTrigRange"
      - delay: 500ms
      - uart.write: "getSensitivity"
      - delay: 500ms
      - uart.write: "getLatency"
      - delay: 500ms
      - uart.write: "getPwm"
      - delay: 500ms
      - uart.write: "getGpioMode"
      - delay: 5000ms
      - switch.turn_on: mmwave_sensor
